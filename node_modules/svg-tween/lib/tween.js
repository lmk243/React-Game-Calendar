'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tweenPaths = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _tweening = require('tweening');

var _tweening2 = _interopRequireDefault(_tweening);

var _svgShapes = require('svg-shapes');

var _matchPoints3 = require('./matchPoints');

var _matchPoints4 = _interopRequireDefault(_matchPoints3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var shapeToPoints = function shapeToPoints(shp) {
  var shape = shp.shape;

  var attributes = _objectWithoutProperties(shp, ['shape']);

  return (0, _svgShapes.getPoints)(shape, attributes);
};

var matchPointArrays = function matchPointArrays(a, b) {
  var x = [];
  var y = [];

  for (var i = 0, l = a.length; i < l; i++) {
    var _matchPoints = (0, _matchPoints4.default)(a[i], b[i]);

    var _matchPoints2 = _slicedToArray(_matchPoints, 2);

    var c = _matchPoints2[0];
    var d = _matchPoints2[1];

    x.push(c);
    y.push(d);
  }

  return [x, y];
};

var tweenPaths = function tweenPaths(_ref) {
  var complete = _ref.complete;
  var duration = _ref.duration;
  var easing = _ref.easing;
  var from = _ref.from;
  var next = _ref.next;
  var to = _ref.to;

  var f = Array.isArray(from) ? from.map(function (d) {
    return { shape: 'path', d: d };
  }) : { shape: 'path', d: from };

  var t = Array.isArray(to) ? to.map(function (d) {
    return { shape: 'path', d: d };
  }) : { shape: 'path', d: to };

  tween({ complete: complete, duration: duration, easing: easing, from: f, next: next, to: t });
};

var tween = function tween(_ref2) {
  var _complete = _ref2.complete;
  var duration = _ref2.duration;
  var easing = _ref2.easing;
  var from = _ref2.from;
  var _next = _ref2.next;
  var to = _ref2.to;

  var fromShapes = Array.isArray(from) ? from : [from];
  var toShapes = Array.isArray(to) ? to : [to];

  var fromPoints = fromShapes.map(shapeToPoints);
  var toPoints = toShapes.map(shapeToPoints);

  var _matchPointArrays = matchPointArrays(fromPoints, toPoints);

  var _matchPointArrays2 = _slicedToArray(_matchPointArrays, 2);

  var f = _matchPointArrays2[0];
  var t = _matchPointArrays2[1];


  (0, _tweening2.default)({
    complete: function complete() {
      if (typeof _next === 'function') {
        toPoints.forEach(function (p, i) {
          return _next((0, _svgShapes.toPath)(p), i);
        });
      }

      if (typeof _complete === 'function') {
        _complete();
      }
    },
    duration: duration,
    easing: easing,
    from: f,
    next: function next(points) {
      if (typeof _next === 'function') {
        points.forEach(function (p, i) {
          return _next((0, _svgShapes.toPath)(p), i);
        });
      }
    },
    to: t
  });
};

exports.tweenPaths = tweenPaths;
exports.default = tween;