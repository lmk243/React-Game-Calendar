'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var middlewareIn = function middlewareIn(value, middleware) {
  if (Array.isArray(value)) {
    var result = [];

    for (var i = 0, l = value.length; i < l; i++) {
      result.push(middlewareIn(value[i], middleware));
    }

    return result;
  } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value !== null) {
    var _result = {};

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = Object.keys(value)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var k = _step.value;

        _result[k] = middlewareIn(value[k], middleware);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return _result;
  } else if (typeof value === 'number' || typeof value === 'string') {
    return middleware.reduce(function (v, _ref) {
      var i = _ref.i;
      return i(v);
    }, value);
  }

  return value;
};

var middlewareOut = function middlewareOut(value, middleware) {
  if (Array.isArray(value)) {
    var result = [];

    for (var i = 0, l = value.length; i < l; i++) {
      result.push(middlewareOut(value[i], middleware));
    }

    return result;
  } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value !== null) {
    if (value.middleware) {
      return middleware.filter(function (_ref2) {
        var name = _ref2.name;
        return name === value.middleware;
      }).reduce(function (v, _ref3) {
        var o = _ref3.o;
        return o(v);
      }, value);
    } else {
      var _result2 = {};

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = Object.keys(value)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var k = _step2.value;

          _result2[k] = middlewareOut(value[k], middleware);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return _result2;
    }
  }

  return value;
};

exports.middlewareIn = middlewareIn;
exports.middlewareOut = middlewareOut;